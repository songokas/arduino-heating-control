const char websiteContent[] PROGMEM {"<!DOCTYPE html>\n<html>\n    <head>\n        <title>Sildymas</title>\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\">\n        <meta charset=\"utf-8\"  />\n        <link rel=\"icon\" href=\"data:;base64,iVBORw0KGgo=\">\n        <script src=\"https://cdnjs.cloudflare.com/ajax/libs/rivets/0.9.6/rivets.bundled.min.js\" type=\"text/javascript\"></script>\n        <link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-alpha.6/css/bootstrap.min.css\" integrity=\"sha384-rwoIResjU2yc3z8GV/NPeZWAv56rSmLldC3R/AZzGRnGxQQKnKkoFVhFQhNUwEyJ\" crossorigin=\"anonymous\">\n        <style>\n            html {\n                font-size: 14px;\n            }\n            body {\n                font-family: -apple-system,system-ui,BlinkMacSystemFont,\"Segoe UI\",Roboto,\"Helvetica Neue\",Arial,sans-serif;\n            }\n            input[type=\"number\"] {\n                width: 5em;\n            }\n        </style>\n\n    </head>\n    <body>\n        <div class=\"container\">\n            <div class=\"row justify-content-lg-center\">\n                <div class=\"col\">\n                    <info>\n                        <h2>Latest data</h2>\n                        <div class=\"row\" style=\"padding: 10px 0\">\n                            <div class=\"col\">Heating:\n                                <span rv-show=\"heater.on\" style=\"background-color:green\">&nbsp;&nbsp;&nbsp;</span>\n                                <span rv-hide=\"heater.on\" style=\"background-color:red\">&nbsp;&nbsp;&nbsp;</span>\n                                <br/>\n                                <small>Boot:{heater.iT|unixToTime}</small>\n                                <small>Memory left: {system.m} bytes</small>\n                                <small>Network failures: {system.f}</small>\n                            </div>\n                            <div class=\"col\">\n                                <div rv-each-time=\"heater.t\">\n                                    On: {time.dtOn|unixToTime} Off: {time.dtOff|unixToTime}\n                                </div>\n                            </div>\n                        </div>\n                        <table class=\"table table-hover\">\n                            <colgroup>\n                                <col width=\"20%\" />\n                                <col />\n                                <col />\n                            </colgroup>\n                            <thead class=\"thead-light\">\n                                <tr>\n                                    <th>Zone</th>\n                                    <th>Data</th>\n                                    <th>History</th>\n                                </tr>\n                            </thead>\n                            <tbody>\n                                <tr rv-each-zone=\"zones\">\n                                    <td>\n                                        <div>\n                                            <strong>{zone.n}</strong>\n                                        </div>\n                                        <div>\n                                            <small>\n                                                pin:{zone.pin}\n                                                state: {zone.st}\n                                            </small>\n                                        </div>\n                                    </td>\n                                    <td>\n                                        <div>Current temperature: {zone.cT|double}</div>\n                                        <div>Expected temperature: {zone.eT|double}</div>\n                                        <div>Last Received: {zone.dtR|unixToTime}</div>\n                                        <div class=\"text-warning\" rv-each-error=\"zone.er\">\n                                            <small>{error|errorToString}</small>\n                                        </div>\n                                    </td>\n                                    <td>\n                                        <div rv-each-time=\"zone.sT\">\n                                            On: {time.dtOn|unixToTime} Off: {time.dtOff|unixToTime}\n                                        </div>\n                                    </td>\n\n                                </tr>\n                                <tr rv-hide=\"zones\">\n                                    <td colspan=\"3\">No data received</td>\n                                </tr>\n                            </tbody>\n                        </table>\n                    </info>\n                    <settings>\n                        <h2>Settings</h2>\n                        <table class=\"table\">\n                            <colgroup>\n                                <col width=\"30%\" />\n                                <col />\n                            </colgroup>\n                            <tbody>\n                                <tr>\n                                    <td>Constant temperature:</td>\n                                    <td class=\"text-left\"><input class=\"form-control-inline form-control-sm\" type=\"number\" step=\"0.1\" rv-value=\"settings.config.constantTemperature | double\" /> C</td>\n                                </tr>\n                                <tr>\n                                    <td>Constant temperature enabled:</td>\n                                    <td class=\"text-left\"><input type=\"checkbox\" rv-checked=\"settings.config.constantTemperatureEnabled\" /></td>\n                                </tr>\n                                <tr>\n                                    <td>Acctuator warmup time:</td>\n                                    <td class=\"text-left\"><input class=\"form-control-inline form-control-sm\" type=\"number\" step=\"0.1\" rv-value=\"settings.config.acctuatorWarmupTime | number\" /> seconds</td>\n                                </tr>\n                                <tr>\n                                    <td>Heater pump stop time:</td>\n                                    <td class=\"text-left\"><input class=\"form-control-inline form-control-sm\" type=\"number\" step=\"0.1\" rv-value=\"settings.config.heaterPumpStopTime | number\" /> seconds</td>\n                                </tr>\n                                <tr>\n                                    <td>Min pwm signal for acctuator:</td>\n                                    <td class=\"text-left\"><input class=\"form-control-inline form-control-sm\" type=\"number\" rv-value=\"settings.config.minPwmState | number\" /> %</td>\n                                </tr>\n                                <tr>\n                                    <td>Min temperature diff between expected and current temperature that pwm will apply:</td>\n                                    <td class=\"text-left\"><input class=\"form-control-inline form-control-sm\" type=\"number\" step=\"0.1\" min=\"0.1\" max=\"1\" rv-value=\"settings.config.minTemperatureDiffForPwm | double\" /></td>\n                                </tr>\n                                <tr>\n                                    <td>Temperature drop for heating to restart:</td>\n                                    <td class=\"text-left\"><input class=\"form-control-inline form-control-sm\" type=\"number\" step=\"0.1\" min=\"0.1\" max=\"2\" rv-value=\"settings.config.temperatureDropWait | double\" /></td>\n                                </tr>\n                            </tbody>\n                        </table>\n                        <table class=\"table table-hover\">\n                            <colgroup>\n                                <col width=\"30%\" />\n                                <col />\n                            </colgroup>\n                            <thead>\n                                <tr>\n                                    <th>Zone</th>\n                                    <th>Temperatures</th>\n                                </tr>\n                            </thead>\n                            <tbody>\n                                <tr rv-each-zone=\"settings.config.zones\">\n                                    <td class=\"text-left\">\n                                        <div class=\"form-group\">\n                                            <button class=\"btn btn-primary btn-sm\" rv-on-click=\"settings.removeZone\">-</button>\n                                            <input type=\"text\" class=\"form-control-inline form-control-sm\" rv-value=\"zone.n\" maxlength=\"30\" placeholder=\"e.g. bathroom\" />\n                                            <input type=\"number\" class=\"form-control-inline form-control-sm\" rv-value=\"zone.id | number\" max=\"199\" size=\"3\" placeholder=\"e.g. 2\" />\n                                        </div>\n                                    </td>\n                                    <td class=\"text-left\">\n                                        <div rv-each-data=\"zone.t\">\n                                            <div class=\"form-group\">\n                                                <label>From:<input type=\"number\" class=\"form-control form-control-sm\" rv-value=\"data.f | number\" min=\"0\" max=\"23\" size=\"4\" placeholder=\"e.g. 21\" /></label>\n                                                <label>To: <input type=\"number\" class=\"form-control form-control-sm\" rv-value=\"data.to | number\" min=\"0\" max=\"24\" size=\"4\" placeholder=\"e.g. 23\" /></label>\n                                                <label>Expected temperature: <input type=\"number\" class=\"form-control form-control-sm\" rv-value=\"data.eT | double\" step=\"0.1\" min=\"15\" max=\"30\" size=\"4\" placeholder=\"e.g. 21\" /></label>\n                                                <button class=\"btn btn-primary btn-sm\" rv-on-click=\"settings.removeTime\">-</button>\n                                            </div>\n                                        </div>\n                                        <button class=\"btn btn-primary btn-sm\" rv-on-click=\"settings.addTime\">+</button>\n                                        <button class=\"btn btn-primary btn-sm\" title=\"Increase temperature for 2 hours\" rv-on-click=\"settings.warmUp\">Warmup</button>\n                                    </td>\n                                </tr>\n                                <tr><td colspan=\"2\"><button class=\"btn btn-primary btn-sm\" rv-on-click=\"settings.addZone\">+</button></td></tr>\n                            </tbody>\n                        </table>\n                        <button class=\"btn btn-primary btn-sm\" rv-on-click=\"settings.save\" rv-disabled=\"settings.updating\">Update</button>\n                        <button class=\"btn btn-primary btn-sm\" rv-on-click=\"settings.clear\" rv-disabled=\"settings.updating\">Reset</button>\n                    </settings>\n                </div>\n            </div>\n        </div>\n        <script type=\"text/javascript\">\n            function ajax(url, data, obj) {\n                var request = new XMLHttpRequest();\n                request.onreadystatechange = function() {\n                    if (this.readyState == 4) {\n                        if (this.status == 200) {\n                            obj.reload();\n                        } else {\n                            alert('Failed to update !! Status : ' + this.status + ' Text: ' + this.responseText);\n                        }\n                        obj.updating = false;\n                    }\n                };\n                request.onerror = function() {\n                    alert('Unknow error occured');\n                }\n                request.timeout = 5000;\n                request.open(\"POST\", url);\n                request.setRequestHeader(\"Content-Type\", \"application/json\");\n                request.send(data);\n            }\n\n            class Settings {\n                constructor(json) {\n                    this.config = json;\n                    this.updating = false;\n                }\n                addZone() {\n                    this.config.zones.push({t:[{}]});\n                }\n                addTime(ev, context, model) {\n                    this.config.zones[model['%zone%']].t.push({});\n                }\n                removeZone(ev, context, model) {\n                    this.config.zones.splice(model.index, 1);\n                }\n                removeTime(ev, context, model) {\n                    this.config.zones[model['%zone%']].t.splice(model.index, 1);\n                }\n                clear() {\n                    this.updating = true;\n                    ajax('/clear/', {}, this);\n                }\n                save() {\n                    this.updating = true;\n                    const data = JSON.stringify(this.config);\n                    ajax('/', data, this);\n                }\n\n                warmUp(ev, context, model) {\n                    ev.preventDefault();\n                    this.updating = true;\n                    const zone = this.config.zones[model['%zone%']]\n                    const url = \"/heating/nodes/\" + zone.n + \"/temperature\"\n                    const data = JSON.stringify({expectedTemperature: 2300});\n                    ajax(url, data, this);\n                }\n\n                reload() {\n                    window.location.reload();\n                }\n            };\n            const info = `;\n            const settings = ~;\n\n            rivets.configure({\n                handler: function(context, ev, binding) {\n                    var position = binding.keypath.indexOf('.');\n                    if (position > 0) {\n                        var property = binding.keypath.substring(0, position);\n                        return this.call(binding.view.models[property], ev, context, binding.view.models);\n                    }\n                    return this.call(binding.view.models, ev, context, binding.view.models);\n                }\n            });\n            rivets.formatters.unixToTime = function(value) {\n                if (!(value > 0)) {\n                    return 'n/a';\n                }\n                var d = new Date();\n                var date = new Date((value + (d.getTimezoneOffset() * 60)) * 1000);\n                return date.toLocaleDateString('lt-LT') + ' ' + date.toLocaleTimeString('lt-LT')\n            };\n            rivets.formatters.errorToString = function(value) {\n                if (value == 1) {\n                    return \"Unable to send data to slave\";\n                }\n                return value + \" - n/a\";\n            };\n            rivets.formatters.number = {\n                read: function(value) { return Math.round(value); },\n                publish: function(value) { return Math.round(value); }\n            };\n            rivets.formatters.double = {\n                read: function(value) { return value ? Math.round(value * 100) / 100 : 0; },\n                publish: function(value) { return value ? Math.round(value * 100) / 100 : 0; },\n            };\n\n            rivets.bind(document.getElementsByTagName('info')[0], info);\n            rivets.bind(document.getElementsByTagName('settings')[0], {settings:new Settings(settings)});\n        </script>\n    </body>\n</html>"};
